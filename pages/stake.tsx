/*import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import { poolDb } from '../components/poolsdb';
import { getPoolDetails, action, autoCompound } from '../components/config';
import { Button } from "@/components/ui/button";  // ShadCN button component
import { Input } from "@/components/ui/input";  // ShadCN input component
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";  // ShadCN dialog (for modal)

export default function Stake() {
  const [poolArray, setPoolArray] = useState([]);
  const [loadingState, setLoadingState] = useState(false);
  const [selectedPoolIndex, setSelectedPoolIndex] = useState<number | null>(null);

  useEffect(() => {
    getPoolInfo();
  }, []);

  const getPoolInfo = async () => {
    setInterval(async () => {
      const poolDetails = await getPoolDetails();
      setPoolArray(poolDetails);
    }, 5000);
  };

  useEffect(() => {
    if (poolArray.length > 0) {
      setLoadingState(true);
    }
  }, [poolArray]);

  const stakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value;
    const result = await action(i, amount, tokenAddress, "stake");
    if (result) {
      document.getElementById("result")!.innerHTML = 'Stake Completed!';
    }
  };

  const unstakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value;
    const result = await action(i, amount, tokenAddress, "unstake");
    if (result) {
      document.getElementById("result")!.innerHTML = 'Unstake Completed!';
    }
  };

  if (!loadingState) {
    return (
      <div className='backstyle font-sans'>
        <Head>
          <title>N2DeX</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="container mx-auto p-4">
          <h3 className='my-3 text-center text-2xl font-bold'>DeFI Staking Pools</h3>
          <video autoPlay muted loop className="rounded" width='100%'>
            <source src="bannervid.webm" type="video/webm" />
          </video>
          <h5 className="text-center mt-4 text-lg">Fetching Details</h5>
        </main>
      </div>
    );
  }

  return (
    <div className="container mx-auto font-sans">
      <h3 className='text-center text-2xl font-bold my-4'>DeFI Staking Pools</h3>
      <video autoPlay muted loop className="rounded mb-8 mx-auto" width="100%">
        <source src="bannervid.webm" type="video/webm" />
      </video>

      {poolDb.map((data, i) => (
        <div key={i} className="flex items-center justify-between bg-gray-800 p-4 mb-4 rounded-lg shadow-lg">
          <div className="flex items-center space-x-4">
            <div>
              <h6 className="text-white font-semibold">Stake {data.lptoken}, Earn {data.rwdtoken}</h6>
              <div className="flex items-center space-x-2">
                <img src={data.lplogo} alt="lp" width={50} />
                <span className="text-white">/</span>
                <img src={data.rwlogo} alt="reward" width={50} />
              </div>
            </div>
            <div className="text-center">
              <h6 className="text-white">Flex APY</h6>
              <h5 className="text-green-400">{poolArray[i]?.apy}%</h5>
            </div>
            <div className="text-center">
              <h6 className="text-white">My Stakings</h6>
              <h5 className="text-blue-400">{poolArray[i]?.userstaked}</h5>
            </div>
            <div className="text-center">
              <h6 className="text-white">Pending Rewards</h6>
              <h5 className="text-yellow-400">{poolArray[i]?.reward}</h5>
            </div>
            <div className="text-center">
              <h6 className="text-white">Total Staked</h6>
              <h5 className="text-white">{poolArray[i]?.totalstaked}</h5>
              <img src={data.lplogo} alt="lp" width={50} />
            </div>
          </div>
          <Button variant="default" onClick={() => setSelectedPoolIndex(i)}>Open Pool</Button>

          
          {selectedPoolIndex === i && (
            <Dialog open={true} onOpenChange={() => setSelectedPoolIndex(null)}>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Stake {data.lptoken}/{data.rwdtoken}</DialogTitle>
                </DialogHeader>
                <div className="flex flex-col space-y-4">
                  <Input type="text" id={`amt${i}`} placeholder="Input Amount" className="bg-gray-700 text-white" />
                  <div className="flex space-x-4">
                    <Button onClick={() => stakeTokens(i, poolArray[i]?.tokenaddr)}>Stake</Button>
                    <Button onClick={() => unstakeTokens(i, poolArray[i]?.tokenaddr)} variant="outline">Unstake</Button>
                  </div>
                  <Button onClick={autoCompound} variant="ghost">{data.autocompound}</Button>
                </div>
              </DialogContent>
            </Dialog>
          )}
        </div>
      ))}
    </div>
  );
}
*/
/*
'use client'

import React, { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import { poolDb } from '../components/poolsdb'
import { getPoolDetails, action, autoCompound } from '../components/config'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ArrowUpDown, Coins, TrendingUp, Wallet } from 'lucide-react'

export default function Stake() {
  const [poolArray, setPoolArray] = useState([])
  const [loadingState, setLoadingState] = useState(false)
  const [selectedPoolIndex, setSelectedPoolIndex] = useState<number | null>(null)

  useEffect(() => {
    getPoolInfo()
  }, [])

  const getPoolInfo = async () => {
    setInterval(async () => {
      const poolDetails = await getPoolDetails()
      setPoolArray(poolDetails)
    }, 5000)
  }

  useEffect(() => {
    if (poolArray.length > 0) {
      setLoadingState(true)
    }
  }, [poolArray])

  const stakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value
    const result = await action(i, amount, tokenAddress, "stake")
    if (result) {
      document.getElementById("result")!.innerHTML = 'Stake Completed!'
    }
  }

  const unstakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value
    const result = await action(i, amount, tokenAddress, "unstake")
    if (result) {
      document.getElementById("result")!.innerHTML = 'Unstake Completed!'
    }
  }

  if (!loadingState) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white font-sans">
        <main className="container mx-auto p-4">
          <h3 className='my-3 text-center text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600'>DeFi Staking Pools</h3>
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
          </div>
          <h5 className="text-center mt-4 text-lg">Fetching Details</h5>
        </main>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white font-sans">
      <div className="container mx-auto p-4">
        <h3 className='text-center text-3xl font-bold my-8 bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600'>DeFi Staking Pools</h3>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {poolDb.map((data, i) => (
            <motion.div
              key={i}
              className="bg-gray-800 p-6 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: i * 0.1 }}
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <img src={data.lplogo} alt="lp" className="w-8 h-8 rounded-full" />
                  <ArrowUpDown className="w-4 h-4 text-gray-400" />
                  <img src={data.rwlogo} alt="reward" className="w-8 h-8 rounded-full" />
                </div>
                <div className="text-sm font-medium text-gray-400">
                  Stake {data.lptoken}, Earn {data.rwdtoken}
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="text-center">
                  <div className="text-sm text-gray-400">Flex APY</div>
                  <div className="text-lg font-bold text-green-400 flex items-center justify-center">
                    <TrendingUp className="w-4 h-4 mr-1" />
                    {poolArray[i]?.apy}%
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-sm text-gray-400">My Stakings</div>
                  <div className="text-lg font-bold text-blue-400 flex items-center justify-center">
                    <Wallet className="w-4 h-4 mr-1" />
                    {poolArray[i]?.userstaked}
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-sm text-gray-400">Pending Rewards</div>
                  <div className="text-lg font-bold text-yellow-400 flex items-center justify-center">
                    <Coins className="w-4 h-4 mr-1" />
                    {poolArray[i]?.reward}
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-sm text-gray-400">Total Staked</div>
                  <div className="text-lg font-bold text-purple-400 flex items-center justify-center">
                    <img src={data.lplogo} alt="lp" className="w-4 h-4 mr-1" />
                    {poolArray[i]?.totalstaked}
                  </div>
                </div>
              </div>

              <Button 
                variant="default" 
                onClick={() => setSelectedPoolIndex(i)}
                className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-300"
              >
                Open Pool
              </Button>

              {selectedPoolIndex === i && (
                <Dialog open={true} onOpenChange={() => setSelectedPoolIndex(null)}>
                  <DialogContent className="bg-gray-800 text-white">
                    <DialogHeader>
                      <DialogTitle className="text-2xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600">
                        Stake {data.lptoken}/{data.rwdtoken}
                      </DialogTitle>
                    </DialogHeader>
                    <div className="flex flex-col space-y-4">
                      <Input 
                        type="text" 
                        id={`amt${i}`} 
                        placeholder="Input Amount" 
                        className="bg-gray-700 text-white border-gray-600 focus:border-blue-500 transition-all duration-300" 
                      />
                      <div className="flex space-x-4">
                        <Button 
                          onClick={() => stakeTokens(i, poolArray[i]?.tokenaddr)}
                          className="flex-1 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 transition-all duration-300"
                        >
                          Stake
                        </Button>
                        <Button 
                          onClick={() => unstakeTokens(i, poolArray[i]?.tokenaddr)} 
                          variant="outline"
                          className="flex-1 border-blue-500 text-blue-500 hover:bg-blue-500 hover:text-white transition-all duration-300"
                        >
                          Unstake
                        </Button>
                      </div>
                      <Button 
                        onClick={autoCompound} 
                        variant="ghost"
                        className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white transition-all duration-300"
                      >
                        {data.autocompound}
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              )}
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  )
}*/
'use client'

import React, { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import { poolDb } from '../components/poolsdb'
import { getPoolDetails, action, autoCompound } from '../components/config'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ArrowUpDown, Coins, TrendingUp, Wallet, Loader } from 'lucide-react'

export default function Stake() {
  const [poolArray, setPoolArray] = useState([])
  const [loadingState, setLoadingState] = useState(false)
  const [selectedPoolIndex, setSelectedPoolIndex] = useState<number | null>(null)
  const [isWalletConnected, setIsWalletConnected] = useState(false)
  const [walletAddress, setWalletAddress] = useState('')
  const [isAddressModalOpen, setIsAddressModalOpen] = useState(false)
  const [resultMessage, setResultMessage] = useState<string | null>(null);

  useEffect(() => {
    getPoolInfo()
    checkIfWalletIsConnected()
  }, [])

  const getPoolInfo = async () => {
    setInterval(async () => {
      const poolDetails = await getPoolDetails()
      setPoolArray(poolDetails)
    }, 5000)
  }

  useEffect(() => {
    if (poolArray.length > 0) {
      setLoadingState(true)
    }
  }, [poolArray])

  const checkIfWalletIsConnected = async () => {
    try {
      const { ethereum } = window as any
      if (ethereum) {
        const accounts = await ethereum.request({ method: 'eth_accounts' })
        if (accounts.length > 0) {
          setIsWalletConnected(true)
          setWalletAddress(accounts[0])
        }
      }
    } catch (error) {
      console.error("An error occurred while checking wallet connection:", error)
    }
  }

  const connectWallet = async () => {
    try {
      const { ethereum } = window as any
      if (!ethereum) {
        alert("Please install MetaMask!")
        return
      }
      const accounts = await ethereum.request({ method: 'eth_requestAccounts' })
      setIsWalletConnected(true)
      setWalletAddress(accounts[0])
    } catch (error) {
      console.error("An error occurred while connecting the wallet:", error)
    }
  }

  const stakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value
    //const amount = amounts[i]
    //const result = await action(i, amount, tokenAddress, "stake")
    //if (result) {
    //  document.getElementById("result")!.innerHTML = 'Stake Completed!'
    //}
    try {
      const result = await action(i, amount, tokenAddress, "stake");
      if (result) {
        // Update the state instead of directly manipulating the DOM
        setResultMessage('Stake Completed!');
      } else {
        setResultMessage('Stake Failed.');
      }
    } catch (error) {
      console.error("Error staking tokens:", error);
      setResultMessage('Error occurred during staking.');
    }

  }

  const unstakeTokens = async (i: number, tokenAddress: string) => {
    const amount = (document.getElementById(`amt${i}`) as HTMLInputElement).value
    //const result = await action(i, amount, tokenAddress, "unstake")
    //if (result) {
    //  document.getElementById("result")!.innerHTML = 'Unstake Completed!'
    //}
    try {
      const result = await action(i, amount, tokenAddress, "unstake");
      if (result) {
        // Update the state instead of directly manipulating the DOM
        setResultMessage('Unstake Completed!');
      } else {
        setResultMessage('UnStake Failed.');
      }
    } catch (error) {
      console.error("Error Unstaking tokens:", error);
      setResultMessage('Error occurred during Unstaking.');
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white font-sans">
      <header className="container mx-auto p-4 flex justify-between items-center">
        <h3 className='text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600'>DeFi Staking</h3>
        <Button 
          onClick={isWalletConnected ? () => setIsAddressModalOpen(true) : connectWallet}
          className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-300"
        >
          {isWalletConnected ? 'Wallet Connected' : 'Connect Wallet'}
        </Button>
      </header>

      <div className="container mx-auto p-4">
        <h3 className='text-center text-3xl font-bold my-8 bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600'>DeFi Staking Pools</h3>

        {!loadingState ? (
          <div className="flex flex-col items-center justify-center h-64">
            <motion.div
              className="grid grid-cols-3 gap-2"
              initial="hidden"
              animate="visible"
            >
              {[...Array(9)].map((_, i) => (
                <motion.div
                  key={i}
                  className="w-4 h-4 bg-blue-500 rounded"
                  variants={{
                    hidden: { opacity: 0, scale: 0.5 },
                    visible: { 
                      opacity: 1, 
                      scale: 1,
                      transition: { 
                        repeat: Infinity, 
                        repeatType: "reverse", 
                        duration: 0.5,
                        delay: i * 0.1
                      }
                    }
                  }}
                />
              ))}
            </motion.div>
            <h5 className="mt-8 text-lg font-medium text-blue-400">Fetching Pool Details</h5>
          </div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {poolDb.map((data, i) => (
              <motion.div
                key={i}
                className="bg-gray-800 p-6 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: i * 0.1 }}
              >
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <img src={data.lplogo} alt="lp" className="w-8 h-8 rounded-full" />
                    <ArrowUpDown className="w-4 h-4 text-gray-400" />
                    <img src={data.rwlogo} alt="reward" className="w-8 h-8 rounded-full" />
                  </div>
                  <div className="text-sm font-medium text-gray-400">
                    Stake {data.lptoken}, Earn {data.rwdtoken}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div className="text-center">
                    <div className="text-sm text-gray-400">Flex APY</div>
                    <div className="text-lg font-bold text-green-400 flex items-center justify-center">
                      <TrendingUp className="w-4 h-4 mr-1" />
                      {poolArray[i]?.apy}%
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-400">My Stakings</div>
                    <div className="text-lg font-bold text-blue-400 flex items-center justify-center">
                      <Wallet className="w-4 h-4 mr-1" />
                      {poolArray[i]?.userstaked}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-400">Pending Rewards</div>
                    <div className="text-lg font-bold text-yellow-400 flex items-center justify-center">
                      <Coins className="w-4 h-4 mr-1" />
                      {poolArray[i]?.reward}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-400">Total Staked</div>
                    <div className="text-lg font-bold text-purple-400 flex items-center justify-center">
                      <img src={data.lplogo} alt="lp" className="w-4 h-4 mr-1" />
                      {poolArray[i]?.totalstaked}
                    </div>
                  </div>
                </div>

                <Button 
                  variant="default" 
                  onClick={() => setSelectedPoolIndex(i)}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-300"
                >
                  Open Pool
                </Button>

                {selectedPoolIndex === i && (
                  <Dialog open={true} onOpenChange={() => setSelectedPoolIndex(null)}>
                    <DialogContent className="bg-gray-800 text-white">
                      <DialogHeader>
                        <DialogTitle className="text-2xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600">
                          Stake {data.lptoken}/{data.rwdtoken}
                        </DialogTitle>
                      </DialogHeader>
                      <div className="flex flex-col space-y-4">
                        <Input 
                          type="text" 
                          id={`amt${i}`} 
                          placeholder="Input Amount" 
                          className="bg-gray-700 text-white border-gray-600 focus:border-blue-500 transition-all duration-300" 
                        />
                        <div className="flex space-x-4">
                          <Button 
                            onClick={() => stakeTokens(i, poolArray[i]?.tokenaddr)}
                            className="flex-1 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 transition-all duration-300"
                          >
                            Stake
                          </Button>
                          <Button 
                            onClick={() => unstakeTokens(i, poolArray[i]?.tokenaddr)} 
                            variant="outline"
                            className="flex-1 border-blue-500 text-blue-500 hover:bg-blue-500 hover:text-white transition-all duration-300"
                          >
                            Unstake
                          </Button>
                        </div>
                        <Button 
                          onClick={autoCompound} 
                          variant="ghost"
                          className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white transition-all duration-300"
                        >
                          {data.autocompound}
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                )}
              </motion.div>
            ))}
          </div>
        )}
      </div>

      <Dialog open={isAddressModalOpen} onOpenChange={setIsAddressModalOpen}>
        <DialogContent className="bg-gray-800 text-white">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-600">
              Connected Wallet
            </DialogTitle>
          </DialogHeader>
          <div className="text-center">
            <p className="text-sm text-gray-400 mb-2">Your wallet address:</p>
            <p className="font-mono bg-gray-700 p-2 rounded">{walletAddress}</p>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}